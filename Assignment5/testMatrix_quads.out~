  0 : main : 
  1 : t0 = 2
  2 : t1 = 2
  3 : t2 = 0
  4 : i = t2
  5 : t3 = 2
  6 : if i < t3 goto 13
  7 : goto 33
  8 : goto 33
  9 : t4 = i
 10 : t5 = 1
 11 : i = i + t5
 12 : goto 5
 13 : t6 = 0
 14 : j = t6
 15 : t7 = 2
 16 : if j < t7 goto 23
 17 : goto 9
 18 : goto 32
 19 : t8 = j
 20 : t9 = 1
 21 : j = j + t9
 22 : goto 15
 23 : t11 = 8
 24 : t10 = i * t11
 25 : t14 = 8
 26 : t12 = j * t14
 27 : t13 = t10 + t12
 28 : t15 = M[t13]
 29 : t16 = 2.340000
 30 : M[t13] = t16
 31 : goto 19
 32 : goto 9
 33 : t17 = 2
 34 : t18 = 2
 35 : t19 = 0
 36 : i = t19
 37 : t20 = 2
 38 : if i < t20 goto 45
 39 : goto 65
 40 : goto 65
 41 : t21 = i
 42 : t22 = 1
 43 : i = i + t22
 44 : goto 37
 45 : t23 = 0
 46 : j = t23
 47 : t24 = 2
 48 : if j < t24 goto 55
 49 : goto 41
 50 : goto 64
 51 : t25 = j
 52 : t26 = 1
 53 : j = j + t26
 54 : goto 47
 55 : t28 = 8
 56 : t27 = i * t28
 57 : t31 = 8
 58 : t29 = j * t31
 59 : t30 = t27 + t29
 60 : t32 = N[t30]
 61 : t33 = 3.340000
 62 : N[t30] = t33
 63 : goto 51
 64 : goto 41
 65 : t34 = 0
 66 : i = t34
 67 : t35 = 2
 68 : if i < t35 goto 75
 69 : goto 97
 70 : goto 97
 71 : t36 = i
 72 : t37 = 1
 73 : i = i + t37
 74 : goto 67
 75 : t38 = 0
 76 : j = t38
 77 : t39 = 2
 78 : if j < t39 goto 85
 79 : goto 71
 80 : goto 96
 81 : t40 = j
 82 : t41 = 1
 83 : j = j + t41
 84 : goto 77
 85 : t43 = 8
 86 : t42 = i * t43
 87 : t46 = 8
 88 : t44 = j * t46
 89 : t45 = t42 + t44
 90 : t47 = M[t45]
 91 : d = t47
 92 : param d
 93 : t48 = call printFlt, 1
 94 : u = t48
 95 : goto 81
 96 : goto 71
 97 : t49 = 0
 98 : return t49
	.text
T0:
	.long	-343597384
	.long	1073920081
T1:
	.long	-343597384
	.long	1074444369
	.globl	main
	.type	main, @function
main:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movq	%rsp, %rbp
	.cfi_def_cfa_register 5
	subq	$320, %rsp
	movl	$2, %eax
	movl	%eax, -4(%rbp)
	movl	$2, %eax
	movl	%eax, -8(%rbp)
	movl	$0, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -52(%rbp)
.L2:
	movl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jl	.L0
	jmp	.L1
	jmp	.L1
.L4:
	movl	-52(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-52(%rbp), %eax
	movl	-72(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -52(%rbp)
	jmp	.L2
.L0:
	movl	$0, %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -56(%rbp)
.L6:
	movl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	-56(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jl	.L3
	jmp	.L4
	jmp	.L5
.L7:
	movl	-56(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	-56(%rbp), %eax
	movl	-88(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -56(%rbp)
	jmp	.L6
.L3:
	movl	$8, %eax
	movl	%eax, -96(%rbp)
	movl	-52(%rbp), %eax
	imull	-96(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$8, %eax
	movl	%eax, -108(%rbp)
	movl	-56(%rbp), %eax
	imull	-108(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-92(%rbp), %eax
	movl	-100(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	leal	-48(%rbp), %edx
	addl	%edx, %eax
	movl	(%eax), %eax
	movl	%eax, -116(%rbp)
	movsd	T0, %xmm0
	movsd	%xmm0, -124(%rbp)
	movl	-104(%rbp), %eax
	leal	-116(%rbp), %edx
	addl	%edx, %eax
	movl	-124(%rbp), %edx
	movl	%edx, (%eax)
	jmp	.L7
.L5:
	jmp	.L4
.L1:
	movl	$2, %eax
	movl	%eax, -128(%rbp)
	movl	$2, %eax
	movl	%eax, -132(%rbp)
	movl	$0, %eax
	movl	%eax, -176(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -52(%rbp)
.L10:
	movl	$2, %eax
	movl	%eax, -180(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jl	.L8
	jmp	.L9
	jmp	.L9
.L12:
	movl	-52(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$1, %eax
	movl	%eax, -188(%rbp)
	movl	-52(%rbp), %eax
	movl	-188(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -52(%rbp)
	jmp	.L10
.L8:
	movl	$0, %eax
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	movl	%eax, -56(%rbp)
.L14:
	movl	$2, %eax
	movl	%eax, -196(%rbp)
	movl	-56(%rbp), %eax
	cmpl	-196(%rbp), %eax
	jl	.L11
	jmp	.L12
	jmp	.L13
.L15:
	movl	-56(%rbp), %eax
	movl	%eax, -200(%rbp)
	movl	$1, %eax
	movl	%eax, -204(%rbp)
	movl	-56(%rbp), %eax
	movl	-204(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -56(%rbp)
	jmp	.L14
.L11:
	movl	$8, %eax
	movl	%eax, -212(%rbp)
	movl	-52(%rbp), %eax
	imull	-212(%rbp), %eax
	movl	%eax, -208(%rbp)
	movl	$8, %eax
	movl	%eax, -224(%rbp)
	movl	-56(%rbp), %eax
	imull	-224(%rbp), %eax
	movl	%eax, -216(%rbp)
	movl	-208(%rbp), %eax
	movl	-216(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	leal	-172(%rbp), %edx
	addl	%edx, %eax
	movl	(%eax), %eax
	movl	%eax, -232(%rbp)
	movsd	T1, %xmm0
	movsd	%xmm0, -240(%rbp)
	movl	-220(%rbp), %eax
	leal	-232(%rbp), %edx
	addl	%edx, %eax
	movl	-240(%rbp), %edx
	movl	%edx, (%eax)
	jmp	.L15
.L13:
	jmp	.L12
.L9:
	movl	$0, %eax
	movl	%eax, -256(%rbp)
	movl	-256(%rbp), %eax
	movl	%eax, -52(%rbp)
.L18:
	movl	$2, %eax
	movl	%eax, -260(%rbp)
	movl	-52(%rbp), %eax
	cmpl	-260(%rbp), %eax
	jl	.L16
	jmp	.L17
	jmp	.L17
.L20:
	movl	-52(%rbp), %eax
	movl	%eax, -264(%rbp)
	movl	$1, %eax
	movl	%eax, -268(%rbp)
	movl	-52(%rbp), %eax
	movl	-268(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -52(%rbp)
	jmp	.L18
.L16:
	movl	$0, %eax
	movl	%eax, -272(%rbp)
	movl	-272(%rbp), %eax
	movl	%eax, -56(%rbp)
.L22:
	movl	$2, %eax
	movl	%eax, -276(%rbp)
	movl	-56(%rbp), %eax
	cmpl	-276(%rbp), %eax
	jl	.L19
	jmp	.L20
	jmp	.L21
.L23:
	movl	-56(%rbp), %eax
	movl	%eax, -280(%rbp)
	movl	$1, %eax
	movl	%eax, -284(%rbp)
	movl	-56(%rbp), %eax
	movl	-284(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -56(%rbp)
	jmp	.L22
.L19:
	movl	$8, %eax
	movl	%eax, -292(%rbp)
	movl	-52(%rbp), %eax
	imull	-292(%rbp), %eax
	movl	%eax, -288(%rbp)
	movl	$8, %eax
	movl	%eax, -304(%rbp)
	movl	-56(%rbp), %eax
	imull	-304(%rbp), %eax
	movl	%eax, -296(%rbp)
	movl	-288(%rbp), %eax
	movl	-296(%rbp), %edx
	addl	%edx, %eax
	movl	%eax, -300(%rbp)
	movl	-300(%rbp), %eax
	leal	-48(%rbp), %edx
	addl	%edx, %eax
	movl	(%eax), %eax
	movl	%eax, -312(%rbp)
	movl	-312(%rbp), %eax
	movsd	%xmm0, -248(%rbp)
	movq	-248(%rbp), %rdi
	call	printFlt
	movl	%eax, -316(%rbp)
	movl	-316(%rbp), %eax
	movl	%eax, -252(%rbp)
	jmp	.L23
.L21:
	jmp	.L20
.L17:
	movl	$0, %eax
	movl	%eax, -320(%rbp)
	movl	-320(%rbp), %eax
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
	.size	main, .-main
