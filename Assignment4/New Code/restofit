/*Declarations*/

declaration: declaration_specifiers init_declarator_list_opt ';'			{printf("declaration => declaration_specifiers init_declarator_list_opt\n");}

declaration_specifiers: type_specifier										{printf("declaration_specifiers => type_specifier\n");}
						|type_specifier declaration_specifiers 				{printf("declaration_specifiers => type_specifier declaration_specifiers\n");}

init_declarator_list_opt: /*empty line*/ 									{printf("init_declarator_list_opt => epsilon\n");}
					    |init_declarator_list 								{printf("init_declarator_list_opt => init_declarator_list\n");}

init_declarator_list: init_declarator 										{printf("init_declarator_list => init_declarator\n");}
					 |init_declarator_list ',' init_declarator 				{printf("init_declarator_list => init_declarator_list, init_declarator\n");}			

init_declarator: declarator 												{printf("init_declarator => declarator\n");}
				|declarator '=' initializer 								{printf("init_declarator => declarator = initializer\n");}	

type_specifier: VOID 														{printf("type_specifier => void\n");}		
				|CHAR 														{printf("type_specifier => char\n");}	
				|SHORT 														{printf("type_specifier => short\n");}	
				|INT 														{printf("type_specifier => int\n");}
				|LONG 														{printf("type_specifier => long\n");}	
				|FLOAT 														{printf("type_specifier => float\n");}
				|DOUBLE 													{printf("type_specifier => double\n");}	
				|MATRIX 													{printf("type_specifier => matrix\n");}	
				|SIGNED 													{printf("type_specifier => signed\n");}
				|UNSIGNED 													{printf("type_specifier => unsigned\n");}
				|BOOL 														{printf("type_specifier => bool\n");}

declarator: pointer_opt direct_declarator 									{printf("declarator => pointer_opt direct_declarator\n");}

pointer_opt : /*empty line*/ 												{printf("pointer_opt => epsilon\n");}
			 |pointer 														{printf("pointer_opt => pointer\n");}

direct_declarator: IDENTIFIER  												{printf("direct_declarator => IDENTIFIER\n");}	
				  |'(' declarator ')' 										{printf("direct_declarator => ( declarator )\n");}
				  |direct_declarator '[' assignment_expression_opt ']' 		{printf("direct_declarator => direct_declarator [ assignment_expression_opt ]\n");}	
				  |direct_declarator '(' parameter_type_list ')' 			{printf("direct_declarator => direct_declarator ( parameter_type_list )\n");}
				  |direct_declarator '(' identifier_list_opt ')'			{printf("direct_declarator => direct_declarator ( identifier_list_opt )\n");}
 
assignment_expression_opt: /*empty line*/ 									{printf("assignent_expression_opt => epsilon\n");}
						 |assignment_expression 							{printf("assignent_expression_opt => assignment_expression\n");}

identifier_list_opt: /*empty line*/ 										{printf("identifier_list_opt => epsilon\n");}		
					 |identifier_list 										{printf("identifier_list_opt => identifier_list\n");}	

pointer: '*' pointer_opt 													{printf("pointer =>  * pointer_opt\n");}		

parameter_type_list: parameter_list 										{printf("parameter_type_list => parameter_list\n");}

parameter_list: parameter_declaration 										{printf("parameter_list => parameter_declaration\n");}
		 	   |parameter_list ',' parameter_declaration 					{printf("parameter_list => parameter_list , parameter_declaration\n");}	

parameter_declaration: declaration_specifiers declarator 					{printf("parameter_declaration => declaration_specifiers declarator\n");}
					  |declaration_specifiers 								{printf("parameter_declaration => declaration_specifiers\n");}	

identifier_list: IDENTIFIER  												{printf("identifier_list => IDENTIFIER\n");}	
				|identifier_list ',' IDENTIFIER 							{printf("identifier_list => identifier_list , IDENTIFIER\n");}

initializer: assignment_expression 											{printf("initializer => assignment_expression\n");}	
			|'{' initializer_row_list '}' 									{printf("initializer => { initializer_row_list }\n");}

initializer_row_list: initializer_row 										{printf("initializer_row_list => initializer_row\n");}	
					 |initializer_row_list ';' initializer_row 				{printf("initializer_row_list => initializer_row_list , initializer_row\n");}

initializer_row: designation_opt initializer 								{printf("initializer_row => designation_opt initializer\n");} 
				|initializer_row ',' designation_opt initializer 			{printf("initializer_row => initializer_row , designation_opt initializer\n");}			
 
designation_opt: /*empty line*/												{printf("designation_opt => epsilon\n");}
				|designation  												{printf("designation_opt => designation\n");}	

designation: designator_list '=' 											{printf("designation => designation_list =\n");}

designator_list: designator 												{printf("designator_list => designator\n");}
				 |designator_list designator  								{printf("designator_list => designator_list designator\n");}

designator: '[' constant_expression ']' 									{printf("designator => [ constant_expression ] \n");}
		   |'.' IDENTIFIER 													{printf("designator => . INDENTIFIER \n");}	

/*Statements*/

statement: labeled_statement											 	{printf("statement => labeled_statement \n");}			
		  |compound_statement												{printf("statement => compound_statement \n");}
		  |expression_statement												{printf("statement => expression_statement\n");}	
		  |selection_statement												{printf("statement => selection_statement\n");}
		  |iteration_statement												{printf("statement => iteration_statement\n");}
		  |jump_statement													{printf("statement => jump_statement\n");}	

labeled_statement: IDENTIFIER ':' statement 								{printf("labeled_statement => IDENTIFIER : statement\n");}
				  |CASE constant_expression ':' statement 					{printf("labeled_statement => CASE constant_expression : statement\n");}
				  |DEFAULT ':' statement 									{printf("labeled_statement => DEFAULT : statement\n");}

compound_statement: '{' block_item_list_opt '}'								{printf("compound_statement => { block_item_list_opt }\n");}

block_item_list_opt : /*empty line*/										{printf("block_item_list_opt => epsilon\n");}
					 |block_item_list 										{printf("block_item_list_opt => block_item_list\n");}

block_item_list: block_item 												{printf("block_item_list => block_item\n");}
				|block_item_list block_item 								{printf("block_item_list => block_item_list block_item\n");}

block_item: declaration  													{printf("block_item => declaration\n");}
		   |statement 														{printf("block_item => statement\n");}		

expression_statement: expression_opt ';'									{printf("expression_statement => expression_opt ;\n");}		

selection_statement: IF'(' expression ')' statement 						{printf("selection_statement => if( expression ) statement\n");}		
					|IF'(' expression ')' statement ELSE statement 			{printf("selection_statement => if( expression ) statement else statement\n");}				
					|SWITCH '(' expression ')' statement 					{printf("selection_statement => switch( expression ) statement\n");}

iteration_statement: WHILE '(' expression ')' statement 											{printf("iteration_statement => while ( expression ) statement\n");}	
					|DO statement WHILE '(' expression ')' ';'										{printf("iteration_statement => do statement while ( expression ) ;\n");}
					|FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' statement 	{printf("iteration_statement => for (expression_opt ; expression_opt ; expression_opt ) statement\n");}
					|FOR '(' declaration expression_opt ':' expression_opt ')' statement  			{printf("iteration_statement => for(declaration expression_opt : expression_opt ) statement\n");}

jump_statement: GOTO IDENTIFIER';' 											{printf("jump_statement => goto identifier;\n");}
				|CONTINUE';' 												{printf("jump_statement => continue;\n");}
				|BREAK';'													{printf("jump_statement => break;\n");}	
				|RETURN expression_opt ';' 									{printf("jump_statement => return expression_opt\n");}

expression_opt: /*empty line*/												{printf("expression_opt => epsilon\n");}
			   |expression 													{printf("expression_opt => expression\n");}		

/* External Definitions */

translation_unit: external_declaration										{printf("translation_unit => external_declaration\n");}
				 |translation_unit external_declaration						{printf("translation_unit => translation_unit external_declaration\n");}

external_declaration: function_definition									{printf("external_declaration => function_definition\n");}
					 |declaration 											{printf("external_declaration => declaration\n");}

function_definition: declaration_specifiers declarator declaration_list_opt compound_statement  	{printf("function_definition => declaration_specifiers declarator declaration_list_opt compound_statement\n");}

declaration_list_opt: /*empty line*/										{printf("declaration_list_opt => epsilon\n");}
					 |declaration_list 										{printf("declaration_list_opt => declaration_list\n");}

declaration_list : declaration 												{printf("declaration_list => declaration\n");}
				  |declaration_list declaration 							{printf("declaration_list => declaration_list\n");}
